package com.jason;
import javax.inject.Inject;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.oauth2.config.annotation.configurers.ClientDetailsServiceConfigurer;
import org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerConfigurerAdapter;
import org.springframework.security.oauth2.config.annotation.web.configuration.EnableAuthorizationServer;
import org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerEndpointsConfigurer;

/**
 * @EnableAuthorizationServer provides the following endpoints by default
 * 
 *                            /oauth/token Endpoint used for generating access tokens /oauth/check_token
 *                            Endpoint a resource server uses to decode access tokens generated by
 *                            authorization server /oauth/confirm_access Endpoint a resource user posts
 *                            for grant approval /oauth/error Endpoint responsible for rendering errors
 *                            in the authorization server /oauth/authorize Endpoint used for generating
 *                            authorization codes; by default, the authorization server doesn't secure
 *                            this endpoint
 * @author Jason
 *
 */
@Configuration
@EnableAuthorizationServer
public class OAuth2AuthorizationServerConfig extends AuthorizationServerConfigurerAdapter {

	@Inject
	private AuthenticationManager authenticationManager;

	@Override
	public void configure(AuthorizationServerEndpointsConfigurer endpoints) throws Exception {
		endpoints.authenticationManager(this.authenticationManager);
	}

	/**
	 * Scopes are arbitrary strings that represent the permissions that a client is allowed to perform on
	 * an API
	 * 
	 * curl -u quickpolliOSClient:top_secret -X POST http://localhost:8080/oauth/token -H "Accept:
	 * application/json" -d "username=mickey&password=cheese&grant_type=password"
	 * 
	 * {"access_token":"9f0e797d-940a-4720-b7ae-2d49ab5f14b6","token_type":"bearer","expires_in":43199,
	 * "scope":"read write"}
	 * 
	 * Provides a bearer token. if the bearer token is compromised, it is possible for a third party to
	 * access the resource. The expires_in value indicates the token's lifetime in seconds.
	 * 
	 * Token is provided in Authorization: Bearer header. curl http://localhost:8080/oauth2/v3/polls -H
	 * "Authorization: Bearer 77ed953e-b3b6-4ea1- 820e-2e9acc702293"
	 */
	@Override
	public void configure(ClientDetailsServiceConfigurer clients) throws Exception {
		clients.inMemory().withClient("quickpolliOSClient").secret("top_secret")
				.authorizedGrantTypes("password").scopes("read", "write")
				.resourceIds("QuickPoll_Resources");
	}
}